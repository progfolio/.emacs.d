(deftheme mine)

;Assignment form: VARIABLE             COLOR      [TTY-COLOR]
(let ((colors '(
                (banana             "#f4e5b6")
                (buff               "#f0db98")
		(champagne          "#f7eccb")
		(darker-gunmetal    "#17171e")
		(dark-gunmetal      "#202029")
                (dim-gray           "#404040")
                (dutch-white        "#e2e1be")
		(eggshell           "#ecebd1")
                (flax               "#eed78d")
                (gray               "#808084")
                (independence       "#6f7083")
		(light-coral        "#ea8881")
                (light-smoke        "#15151c")
		(mantis             "#5ecf4e")
		(mint               "#40dd66")
                (pale-violet-red    "#da6d8a")
                (ruber              "#d24d71")
                (cinnamon-satin     "#d65d7d")
		(orchid             "#e086d3")
		(light-orchid       "#e8a7df")
		(plum               "#e59cdb")
		(lavender           "#a469c2")
		(peach              "#ffc09f")
		(pearl              "#e7e6c4")
		(sky-blue           "#7cc1d6")
		(smoke              "#131319")
                (vanilla            "#f1dea1")
		))
    (faces '(;; default
	       (cursor  :background ,peach)
               ;;still haven't found the best foreground color
	       (default :background ,darker-gunmetal :foreground ,banana :weight medium)
	       (info-string :foreground  ,peach)
	       (region  :background ,dutch-white   :foreground  ,dark-gunmetal)
	       ;;syntax
	       (font-lock-keyword-face :bold t :foreground ,light-coral)
	       (font-lock-builtin-face :bold nil :foreground ,gray :family "Source Code Pro")
	       (font-lock-comment-face :foreground ,sky-blue :family "Source Code Pro")
	       (font-lock-constant-face :foreground ,sky-blue :bold t)
               ;; mode-line
               (mode-line :foreground ,mint :background ,darker-gunmetal :box ,sky-blue)
               (mode-line-inactive :foreground ,mint :background ,darker-gunmetal :box ,sky-blue)
               (mode-line-active :foreground ,darker-gunmetal)
               (mode-line-emphasis :foreground ,darker-gunmetal :background ,peach)
               (space-line-highlight :foreground ,darker-gunmetal :background ,peach)
               (space-line-unmodified :foreground ,darker-gunmetal :background ,peach)
               (space-evil-normal :foreground ,darker-gunmetal :background ,peach)
               ;; helm
               ;;(helm-bookmark-w3m :foreground ,type)
               ;;(helm-buffer-not-saved :foreground ,type :background ,bg1)
               ;;(helm-buffer-process :foreground ,builtin :background ,bg1)
               ;;(helm-buffer-saved-out :foreground ,fg1 :background ,bg1)
               ;;(helm-buffer-size :foreground ,fg1 :background ,bg1)
               ;;(helm-candidate-number :foreground ,bg1 :background ,fg1)
               ;;(helm-ff-directory :foreground ,func :background ,bg1 :weight bold)
               ;;(helm-ff-executable :foreground ,key2 :background ,bg1 :weight normal)
               ;;(helm-ff-file :foreground ,fg1 :background ,bg1 :weight normal)
               ;;(helm-ff-invalid-symlink :foreground ,key3 :background ,bg1 :weight bold)
               ;;(helm-ff-prefix :foreground ,bg1 :background ,keyword :weight normal)
               ;;(helm-ff-symlink :foreground ,keyword :background ,bg1 :weight bold)
               ;;(helm-grep-cmd-line :foreground ,fg1 :background ,bg1)
               ;;(helm-grep-file :foreground ,fg1 :background ,bg1)
               ;;(helm-grep-finish :foreground ,fg2 :background ,bg1)
               ;;(helm-grep-lineno :foreground ,fg1 :background ,bg1)
               ;;(helm-grep-match :foreground nil :background nil :inherit helm-match)
               ;;(helm-grep-running :foreground ,func :background ,bg1)
               (helm-header :foreground ,peach :background ,darker-gunmetal :underline nil :box nil)
               ;;(helm-moccur-buffer :foreground ,func :background ,bg1)
               (helm-selection :background ,light-coral :foreground ,darker-gunmetal :underline nil)
               (helm-selection-line :background ,dark-gunmetal :foreground ,mint)
               (helm-separator :foreground ,dark-gunmetal :background ,sky-blue)
               ;;(helm-source-go-package-godoc-description :foreground ,str)
               (helm-source-header :foreground ,darker-gunmetal :background ,sky-blue
                                   :underline nil :weight bold)
               ;;(helm-time-zone-current :foreground ,builtin :background ,bg1)
               ;;(helm-time-zone-home :foreground ,type :background ,bg1)
               ;;(helm-visible-mark :foreground ,bg1 :background ,bg3)
               ;;###org
               (org-block :background ,smoke :foreground ,mint :weight normal )
               (org-block-begin-line :background ,light-smoke :foreground ,dim-gray)
               (org-block-end-line :background ,light-smoke :foreground ,dim-gray)
               (org-ellipsis :foreground ,dim-gray)
               (org-todo :background nil :foreground ,light-coral :bold t :italic t :family "Source Code Pro")
               (org-code :family "Source Code Pro" :bold t :foreground ,peach)
               (org-verbatim :family "Source Code Pro" :bold t :foreground ,sky-blue)
               (org-level-1 :family "Source Code Pro" :bold t :underline nil :foreground ,sky-blue)
               (org-level-2 :family "Source Code Pro" :bold t :underline nil :foreground ,pale-violet-red)
	       )))
    (apply #'custom-theme-set-faces
	   'mine
	   (let ((color-names (mapcar #'car colors))
		 (graphic-colors (mapcar #'cadr colors))
		 (tty-colors (mapcar #'car (mapcar #'last colors))))
	     (cl-flet* ((expand-for-tty (spec) (cl-progv color-names tty-colors
						 (eval `(backquote ,spec))))
			(expand-for-graphic (spec) (cl-progv color-names graphic-colors
						     (eval `(backquote ,spec)))))
	       (cl-loop for (face . spec) in faces
			collect `(,face
				  ((((type tty))
				    ,(expand-for-tty spec))
				   (((type graphic))
				    ,(expand-for-graphic spec)))))))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
	       (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'mine)

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; mine-theme.el ends here
